#this function draws the coordinate plane
def coord_plane(turtle_name, sheet_name):
    sheet_name.tracer(0, 0)
    for i in range(4):
        for j in range(10):
            turtle_name.forward(100)
            turtle_name.left(90)
            turtle_name.forward(5)
            turtle_name.forward(-10)
            turtle_name.forward(5)
            turtle_name.right(90)
        turtle_name.goto(0, 0)
        turtle_name.left(90)
    sheet_name.tracer(1, 10)

#calculates the starting point and side length
def pol_center(number_of_sides, pol_size, x, y):
    radians = math.radians(180 / number_of_sides)    #convert (180 / n) degrees to radians
    inradius = pol_size * math.cos(radians)    #radius of incircle
    side_len = inradius * 2 * math.tan(radians)    #side length
    x -= side_len / 2
    y -= inradius 
    return [inradius, side_len, x, y]


import turtle
import sys
import math

#which point to center polygon at
x = int(input("x coordinate: "))
y = int(input("y coordinate: "))

#this is the radius of circumscribed circle, defines the size of the polygon
polygon_size = int(input("polygon size: "))

#number of sides of the polygon
n = int(input("how many sides?: "))

#this is the polygon density q, also called turning number from the SchlÃ¤fli symbol {p/q},
#where p - number of vertices. 
step = int(input("Star density?: "))

if step >= n or step < 1:
    print("step should be greater than zero and less than the number of list_of_vertices")
    sys.exit()


turn = 360 / n    #turn angle

sheet = turtle.Screen()    #create screen and turtle
dude = turtle.Turtle()

coord_plane(dude, sheet)    #draw x and y axis


f = pol_center(n, polygon_size, x, y)

inradius = f[0]    #inscribed circle radius

side_length = f[1]    #side length

#starting point
x = f[2]
y = f[3]

#move the turtle to starting point
dude.penup()
dude.goto(x, y)
dude.pendown()
sheet.tracer(1, 0)

#draw a polygon and record coordinates of the list_of_vertices
list_of_vertices = []
for i in range(n):
    list_of_vertices.append(dude.pos())
    dude.forward(side_length)
    dude.left(turn)

#draw a star polygon
starting_index = step
while True:
    dude.goto(list_of_vertices[starting_index])
    starting_index += step
    if starting_index >= len(list_of_vertices):
        starting_index -= n
        
        
        
    if ((x - dude.pos()[0])**2 + (y - dude.pos()[1])**2)**0.5 < 1:
        break
    
sheet.mainloop()
