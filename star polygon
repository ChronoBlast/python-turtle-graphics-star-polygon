#this function draws the coordinate plane
def coord_plane(turtle_name, sheet_name):
    sheet_name.tracer(0, 0)
    for i in range(4):
        for j in range(10):
            turtle_name.forward(100)
            turtle_name.left(90)
            turtle_name.forward(5)
            turtle_name.forward(-10)
            turtle_name.forward(5)
            turtle_name.right(90)
        turtle_name.goto(0, 0)
        turtle_name.left(90)
    sheet_name.tracer(1, 10)

#calculates the starting point and side length
def pol_center(n_sides, pol_size, x, y):
    rad = math.radians(180 / n_sides)    #convert (180 / n) degrees to radians
    in_r = pol_size * math.cos(rad)    #radius of incircle
    side = in_r * 2 * math.tan(rad)    #side length
    x -= side / 2
    y -= in_r 
    return ([in_r, side, x, y])


import turtle
import sys
import math

x = int(input("x coordinate: "))
y = int(input("y coordinate: "))
circ_r = int(input("polygon size: "))
n = int(input("how many sides?: "))
step = int(input("Star density?: "))

if step >= n or step < 1:
    print("step should be greater than zero and less than the number of vertices")
    sys.exit()


turn = 360 / n    #turn angle

sheet = turtle.Screen()    #create screen and turtle
dude = turtle.Turtle()

coord_plane(dude, sheet)    #draw x and y axis


f = pol_center(n, circ_r, x, y)

inradius = f[0]    #inscribed circle radius

side_l = f[1]    #side length

#starting point
x = f[2]
y = f[3]

#move the turtle to starting point
dude.penup()
dude.goto(x, y)
dude.pendown()
sheet.tracer(1, 0)

#draw a polygon and record coordinates of the vertices
vertices = []
for i in range(n):
    vertices.append(dude.pos())
    dude.forward(side_l)
    dude.left(turn)

#draw a star polygon
starting_index = step
while True:
    dude.goto(vertices[starting_index])
    starting_index += step
    if starting_index >= len(vertices):
        starting_index -= n
        
        
        
    if ((x - dude.pos()[0])**2 + (y - dude.pos()[1])**2)**0.5 < 1:
        break
    
sheet.mainloop()
